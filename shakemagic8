import logging
import random
import os
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# Define the responses
responses = ["Yes", "No", "Maybe"]

# Function to overlay a vector image
def overlay_vector_image(base_image: Image, vector_image_path: str) -> Image:
    vector_img = Image.open(vector_image_path).convert("RGBA")
    x_center = (base_image.width - vector_img.width) // 2
    y_center = (base_image.height - vector_img.height) // 2
    base_image.paste(vector_img, (x_center, y_center), vector_img)
    return base_image

# Function to generate the response image
def generate_response_image(user_image: BytesIO, vector_image_path: str) -> BytesIO:
    user_img = Image.open(user_image).convert("RGBA")
    user_img = overlay_vector_image(user_img, vector_image_path)
    draw = ImageDraw.Draw(user_img)
    response = random.choice(responses)
    font = ImageFont.truetype("arial.ttf", 500)  # Larger font size

    text_width, text_height = draw.textsize(response, font=font)
    text_x = (user_img.width - text_width) // 2
    text_y = (user_img.height - text_height) // 2

    # Draw a semi-transparent rectangle behind the text
    rectangle_margin = 10
    draw.rectangle([text_x - rectangle_margin, text_y - rectangle_margin, 
                    text_x + text_width + rectangle_margin, text_y + text_height + rectangle_margin], 
                   fill=(0, 0, 0, 127))  # Semi-transparent black

    # Add outlined text
    outline_thickness = 2
    for dx in range(-outline_thickness, outline_thickness + 1):
        for dy in range(-outline_thickness, outline_thickness + 1):
            draw.text((text_x + dx, text_y + dy), response, font=font, fill="black")
    draw.text((text_x, text_y), response, font=font, fill="white")

    output_image = BytesIO()
    user_img.save(output_image, format='PNG')
    output_image.seek(0)
    return output_image

# Command handler and other parts of the bot remain the same

if __name__ == '__main__':
    logger.debug("Starting the bot script")
    main()
