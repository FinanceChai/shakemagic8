import logging
import random
import os
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# Define the responses
responses = ["Yes", "No", "Maybe"]

# Function to overlay a vector image as a border
def overlay_vector_image(base_image: Image, vector_image_path: str) -> Image:
    vector_img = Image.open(vector_image_path).convert("RGBA")
    # Resize the vector image to 1/15 of the smaller side of the base image
    factor = min(base_image.width, base_image.height) // 15
    vector_img = vector_img.resize((factor, factor), Image.ANTIALIAS)
    
    # Place the vector image around the border of the base image
    for y in range(0, base_image.height, factor):
        for x in range(0, base_image.width, factor):
            if x == 0 or y == 0 or x + factor >= base_image.width or y + factor >= base_image.height:
                base_image.paste(vector_img, (x, y), vector_img)
    return base_image

def generate_response_image(user_image: BytesIO, vector_image_path: str) -> BytesIO:
    user_img = Image.open(user_image).convert("RGBA")
    user_img = overlay_vector_image(user_img, vector_image_path)
    response = random.choice(responses)
    
    # Create a new image for text with extra space
    new_height = user_img.height + 100  # 100 pixels for text
    new_img = Image.new('RGBA', (user_img.width, new_height))
    new_img.paste(user_img, (0, 0))

    draw = ImageDraw.Draw(new_img)
    
    # Load font or use default
    try:
        font = ImageFont.truetype("arial.ttf", 100)
    except IOError:
        logging.error("Arial font not found, using default font.")
        font = ImageFont.load_default()

    # Define text position and draw background
    text_x, text_y = 10, user_img.height + 10
    text_width, text_height = draw.textsize(response, font=font)
    text_background_color = (0, 0, 0, 127)  # Semi-transparent black
    draw.rectangle([(text_x, text_y), (text_x + text_width + 20, text_y + text_height + 10)],
                   fill=text_background_color)

    # Draw the text
    draw.text((text_x + 10, text_y + 5), response, font=font, fill="white")

    # Save the image to a BytesIO object
    output_image = BytesIO()
    new_img.save(output_image, format='PNG')
    output_image.seek(0)
    return output_image

# Command handler for /shake8ball
async def shake8ball(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("User %s initiated /shake8ball", user.first_name)
    await update.message.reply_text('Please send me a yes/no question followed by an image.')

# Message handler for images
async def handle_image(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("User %s sent an image", user.first_name)
    photo = await update.message.photo[-1].get_file()
    photo_file = BytesIO(await photo.download_as_bytearray())
    vector_image_path = "overlay.png"  # Ensure this path is correct
    response_image = generate_response_image(photo_file, vector_image_path)
    await update.message.reply_photo(photo=InputFile(response_image, filename="response.png"))

def main() -> None:
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN environment variable not set")
        return
    application = Application.builder().token(token).build()
    application.add_handler(CommandHandler("shake8ball", shake8ball))
    application.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, handle_image))
    logger.info("Starting the bot")
    application.run_polling()

if __name__ == '__main__':
    logger.debug("Starting the bot script")
    main()
