import logging
import random
import os
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # Change to DEBUG to capture more detailed logs
)
logger = logging.getLogger(__name__)

# Define the responses
responses = ["Yes", "No", "Maybe"]

# Function to overlay a vector image
def overlay_vector_image(base_image: Image, vector_image_path: str) -> Image:
    vector_img = Image.open(vector_image_path).convert("RGBA")
    # Calculate position to center the vector image
    x = (base_image.width - vector_img.width) // 2
    y = (base_image.height - vector_img.height) // 2
    base_image.paste(vector_img, (x, y), vector_img)
    return base_image

# Function to generate the response image
def generate_response_image(user_image: BytesIO, vector_image_path: str) -> BytesIO:
    # Load the user image
    user_img = Image.open(user_image).convert("RGBA")

    # Overlay the vector image
    user_img = overlay_vector_image(user_img, vector_image_path)

    # Create a draw object
    draw = ImageDraw.Draw(user_img)

    # Choose a random response
    response = random.choice(responses)

    # Load a font with size 48 for better visibility
    font = ImageFont.truetype("arial.ttf", 48)

    # Calculate text size
    text_width, text_height = draw.textsize(response, font=font)

    # Calculate text position to center it on the image
    text_position = ((user_img.width - text_width) // 2, (user_img.height - text_height) // 2)

    # Add the response text to the image
    draw.text(text_position, response, font=font, fill="white")

    # Save the modified image to a BytesIO object
    output_image = BytesIO()
    user_img.save(output_image, format='PNG')
    output_image.seek(0)

    return output_image

# Command handler for /shake8ball
async def shake8ball(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("User %s initiated /shake8ball", user.first_name)
    
    # Send a message to ask for a yes/no question
    await update.message.reply_text('Please send me a yes/no question followed by an image.')

# Message handler for images
async def handle_image(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    logger.info("User %s sent an image", user.first_name)
    
    # Get the image file
    photo = await update.message.photo[-1].get_file()
    photo_file = BytesIO(await photo.download_as_bytearray())

    # Path to the vector image (ensure this path is correct)
    vector_image_path = "overlay.png"

    # Generate the response image
    response_image = generate_response_image(photo_file, vector_image_path)

    # Send the response image back to the user
    await update.message.reply_photo(photo=InputFile(response_image, filename="response.png"))

def main() -> None:
    # Get the bot token from the environment variable
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN environment variable not set")
        return
    
    # Create the Application and pass it your bot's token.
    logger.debug("Creating Application with token: %s", token)
    application = Application.builder().token(token).build()

    # Add command handler for /shake8ball
    application.add_handler(CommandHandler("shake8ball", shake8ball))
    logger.debug("Added command handler for /shake8ball")

    # Add message handler for images
    application.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, handle_image))
    logger.debug("Added message handler for images")

    # Start the Bot
    logger.info("Starting the bot")
    application.run_polling()
    logger.info("Bot is polling for updates")

if __name__ == '__main__':
    logger.debug("Starting the bot script")
    main()
